# SPDX-FileCopyrightText: 2020 Open Networking Foundation <info@opennetworking.org>
#
# SPDX-License-Identifier: LicenseRef-ONF-Member-Only-1.0

---
# Run Makefile targets and optionally collect unit test data

- job-template:
    id: 'private-make-test'
    name: 'private-make-test{name-extension}_{project}'

    description: |
      Created by {id} job-template from ci-management/jjb/templates/private-make-test.yaml<br/>
      Runs make with the following test targets - '{make-test-targets}' and with the<br/>
      following env. variables - '{make-test-vars}'

    triggers:
      - onf-infra-gerrit-trigger-patchset:
          gerrit-server-name: '{gerrit-server-name}'
          project-regexp: '^{project}$'
          branch-regexp: '{branch-regexp}'
          dependency-jobs: '{dependency-jobs}'
          file-include-regexp: '{all-files-regexp}'

    properties:
      - onf-infra-onfstaff-private:
      - onf-infra-properties:
          build-days-to-keep: '{build-days-to-keep}'
          artifact-num-to-keep: '{artifact-num-to-keep}'

    wrappers:
      - credentials-binding:
          - username-password-separated:
              credential-id: docker-artifact-push-credentials
              username: DOCKERHUB_USERNAME
              password: DOCKERHUB_PASSWORD
      - lf-infra-wrappers-common:
          build-timeout: "{build-timeout}"
      - ssh-agent-credentials:
          users:
            - '{github-onf-bot-ssh-credential}'

    scm:
      - onf-infra-gerrit-scm:
          git-url: '$GIT_URL/$GERRIT_PROJECT'
          refspec: '$GERRIT_REFSPEC'
          branch: '$GERRIT_BRANCH'
          submodule-recursive: '{submodule-recursive}'
          choosing-strategy: gerrit
          jenkins-ssh-credential: '{jenkins-ssh-credential}'
          basedir: '{project}'

    node: '{build-node}'
    project-type: freestyle
    concurrent: true

    builders:
      - inject:
          properties-content: |
            {make-test-vars}
            DEST_GOPATH={dest-gopath}
            MAKE_TEST_TARGETS={make-test-targets}
            MAKE_TEST_KEEP_GOING={make-test-keep-going}
      - shell: !include-raw-escape: ../shell/make-test.sh

    publishers:
      - junit:
          results: "**/*results.xml,**/*report.xml"
          allow-empty-results: '{junit-allow-empty-results}'
      - cobertura:
          report-file: "**/*coverage.xml"
          targets:
            - files:
                healthy: 80
                unhealthy: 0
                failing: 0
            - method:
                healthy: 50
                unhealthy: 0
                failing: 0
